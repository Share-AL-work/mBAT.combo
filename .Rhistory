}
tryCatch(all(sapply(x, is_wholenumber, tol = tol)),
error = function(e) invisible(FALSE)
)
}
#' Title
#'
#' @param x
#' @param ...
#'
#' @return
#' @export
#'
#' @examples
pretty_num <- function(x, ...) {
prettyNum(x, big.mark = ",", scientific = FALSE, ...)
}
#' Title
#'
#' @param x
#'
#' @return
#' @export
#'
#' @examples
if_dup_ind <- function(x) {
which(duplicated(x) | duplicated(x, fromLast = TRUE))
}
allele_flip_gwas_beta <-function(gwas,info_LD,no_AF) {
#  PhysPos
allele <- c("A1", "A2")
gwas <- gwas %>% dplyr::mutate_at(allele, as.character)
gwas$AF1 <- as.numeric(gwas$AF1)
info_LD <- info_LD %>% dplyr::mutate_at(allele, as.character)
info_LD$A1Freq <- as.numeric(info_LD$A1Freq)
matched_id <- which(gwas$A1 == info_LD$A1 & gwas$A2 == info_LD$A2)
gwas_tmp1 <- gwas[matched_id,]
mismatched_id <- which(gwas$A1 == info_LD$A2 & gwas$A2 == info_LD$A1)
gwas$beta[mismatched_id] <- -1 * gwas$beta[mismatched_id]
gwas$AF1[mismatched_id] <- 1 - gwas$AF1[mismatched_id]
gwas_tmp2 <- gwas[mismatched_id,]
gwas_final <- rbind(gwas_tmp1,gwas_tmp2)
#badsnps(abs(gwas_AF1-LD_A1Freq)>=0.2)
if(no_AF){
gwas_final <- dplyr::inner_join(gwas_final,info_LD%>%dplyr::select(ID,PhysPos,A1Freq)%>%dplyr::rename(snp=ID),by="snp")%>%dplyr::arrange(PhysPos)
} else {
gwas_final <- dplyr::inner_join(gwas_final,info_LD%>%dplyr::select(ID,PhysPos,A1Freq)%>%dplyr::rename(snp=ID),by="snp")%>%dplyr::arrange(PhysPos)
gwas_final$dif_AF <- abs(gwas_final$AF1 - gwas_final$A1Freq)
gwas_final <- gwas_final%>%filter(dif_AF<0.2)
}
return(gwas_final)
}
ACATO <- function(p) {
if (all(is.na(p))) {
return(NA)
}
p <- p[!is.na(p)]
p[p == 1] <- 1 - 1e-16
## this line is just added, April4 by Ang
#(https://rdrr.io/cran/sumFREGAT/src/R/ACATO.R)
#### check if there are very small non-zero p values
is.small <- (p < 1e-16)
if (sum(is.small) == 0) {
cct.stat <- sum(tan((0.5 - p) * pi)) / length(p)
} else {
cct.stat <- sum((1 / p[is.small]) / pi)
cct.stat <- cct.stat + sum(tan((0.5 - p[!is.small]) * pi))
cct.stat <- cct.stat / length(p)
}
#### check if the test statistic is very large.
if (cct.stat > 1e+15) {
pval <- (1 / cct.stat) / pi
} else {
pval <- 1 - pcauchy(cct.stat)
}
pval
}
snp2gene <- function(info_snp, info_gene,
window_start = 50L,
window_end = 50L,
only_sets=FALSE) {
info_snp_name <- deparse(substitute(info_snp))
df_check(info_snp)
df_check(info_gene)
columns_check(info_snp, c("snp", "chr", "pos"))
columns_check(info_gene, c("gene", "chr", "start", "end"))
nonneg_num_check(window_start, "window_start")
nonneg_num_check(window_end, "window_end")
if (anyDuplicated(info_snp$snp) > 0L) {
stop("SNP IDs in ", "'", info_snp_name, "'", " must be unique.",
call. = FALSE)
}
snpdat <- data.table(
snp = as.character(info_snp$snp),
chr = as.character(info_snp$chr),
start = as.integer(info_snp$pos),
end = as.integer(info_snp$pos),
key = c("chr", "start", "end")
)
genedat <- data.table(
gene = as.character(info_gene$gene),
chr = as.character(info_gene$chr),
start = as.integer(
ifelse(info_gene$start - window_start * 1000 < 1L,
1,
info_gene$start - window_start * 1000)
),
end = as.integer(info_gene$end + window_end * 1000),
gene.start = as.integer(info_gene$start),
gene.end = as.integer(info_gene$end),
key = c("chr", "start", "end")
)
mapped <- foverlaps(snpdat, genedat, type = "within")
snp_sets <- lapply(split(mapped[!is.na(gene), .(snp, gene)],
by = "gene", keep.by = FALSE),
function(x) unique(unname(unlist(x))))
if (only_sets) {
list(sets = snp_sets)
} else {
setnames(mapped,
old = c("start", "end", "i.start"),
new = c("gene.adj.start", "gene.adj.end", "pos"))
vkeep <- c("snp", "chr", "pos",
"gene", "gene.start", "gene.end",
"gene.adj.start", "gene.adj.end")
list(sets = snp_sets,
map = setDF(setorder(mapped[, vkeep, with = FALSE],
chr, gene.start, gene.end, pos,
na.last = TRUE)))
}
}
ReadLDMbin <- function(prefix) {
InfoFile <- paste(prefix,".info",sep="")
BinFile <- paste(prefix,".bin",sep="")
info <- read.table(InfoFile, header=T)
m <- as.numeric(dim(info)[1])
ldm <- matrix(readBin(BinFile, n=m*m, what=numeric(0), size=4), nrow=m)
return(ldm)
}
qc_LD_op <- function(gwas,LD,qc_snp_list){
snplist <- Reduce(intersect,list(gwas$snp,qc_snp_list$snp))
#get the new order_position(id) of refLD snps (re-ordered according to common snps in gwas summary data).
LD_qced_snp_id <- colnames(LD)[match(snplist,colnames(LD))]
#LD re-ordered according to the order of common SNPs between gwas and refLD.
LD_qced <- LD[LD_qced_snp_id,LD_qced_snp_id,drop=FALSE]
return(LD_qced)
}
qc_gwas_op <- function(gwas,qc_snp_list) {
snplist <- Reduce(intersect,list(gwas$snp,qc_snp_list$snp))
gwas_qced <- gwas[match(snplist, gwas$snp),]
return(gwas_qced)
}
mbat_SVD <- function(gwas_noqc_final, eig, prop, fastBAT_call, z, chr_name, ID, gene_annotate){
posval <- eig$values[eig$values>1e-10]
if (prop == 1) {
k_prop <- length(posval)
} else {
k_prop <- which(cumsum(posval/sum(posval)) > as.numeric(prop))[1]
}
selected_prop <- 1:k_prop
lambda_prop <- eig$values[selected_prop]
U_prop <- eig$vectors[,selected_prop]
UPz_prop <- crossprod(U_prop, z)
chisq_prop <- crossprod(UPz_prop, 1/lambda_prop * UPz_prop)
P_mbat_svd_prop <- pchisq(chisq_prop, df=k_prop, lower.tail=FALSE)
res_mBAT <- data.frame(Gene = ID,
Chr = chr_name,
Start = as.numeric(gene_annotate%>%dplyr::filter(gene==ID,chr==chr_name)%>%dplyr::select(start)),
End = as.numeric(gene_annotate%>%dplyr::filter(gene==ID,chr==chr_name)%>%dplyr::select(end)),
No.SNPs = nrow(gwas_noqc_final),
SNP_start = gwas_noqc_final$snp[1],
SNP_end = gwas_noqc_final$snp[nrow(gwas_noqc_final)],
TopSNP = as.character(gwas_noqc_final%>%dplyr::filter(P==min(gwas_noqc_final$P))%>%dplyr::select(snp)),
TopSNP_Pvalue = min(gwas_noqc_final$P),
No.Eigenvalues = k_prop,
Chisq_mBAT = chisq_prop,
P_mBAT = P_mbat_svd_prop)
P_fastbat <- fastBAT_call$Pvalue
Chisq_fastBAT <- fastBAT_call$`Chisq(Obs)`
P_combo <- ACATO(c(P_fastbat, P_mbat_svd_prop))
res_mBAT$Chisq_fastBAT <- as.numeric(Chisq_fastBAT)
res_mBAT$P_fastBAT <- as.numeric(P_fastbat)
res_mBAT$P_mBATcombo <- as.numeric(P_combo)
# reorder by column name
res_mBAT <- res_mBAT[, c("Gene", "Chr", "Start", "End", "No.SNPs", "SNP_start", "SNP_end", "TopSNP", "TopSNP_Pvalue", "No.Eigenvalues", "Chisq_mBAT", "P_mBATcombo", "P_mBAT", "Chisq_fastBAT", "P_fastBAT")]
return(res_mBAT)
}
mBAT_combo <- function(bim_file,
map_file,
assoc_file,
LD_path,
result_path,
fastBAT_output,
prop,
gene_annotate) {
gene_annotate <- data.table::fread(map_file,h=F)
names(gene_annotate) <- c("chr","start","end","gene")
#Read in original GWAS summary statistics in gene region.
gwas_ori <- data.table::fread(assoc_file)
#gwas_ori = read.table(assoc_file, sep = "", header = T, na.strings = "NA", stringsAsFactors = F)
names(gwas_ori) <- c("snp","A1","A2","AF1","beta","se","P","N")
bim <- data.table::fread(bim_file)
names(bim) <- c("chr","snp","bp","pos","A1","A2")
snp2gene_ma <- snp2gene(
bim,
gene_annotate,
window_start = 50,
window_end = 50,
only_sets = FALSE
)$map
dt <- dplyr::inner_join(bim%>%dplyr::mutate(chr = as.character(chr)),snp2gene_ma%>%dplyr::select("snp","chr","pos","gene"),by= c("chr", "snp", "pos"))%>%dplyr::select(snp,gene,chr)
dt <- na.omit(dt)
dt_ma <- dplyr::inner_join(dt,gwas_ori,by="snp")
# read in fastBAT pruning results including gene names
fastBAT_file <- data.table::fread(fastBAT_output)
fastBAT_file$Chr <- as.numeric(fastBAT_file$Chr)
fastBAT_file$Gene <- as.character(fastBAT_file$Gene)
gene_list <- data.frame(Gene=unique(dt_ma$gene))
all_res=NULL
for(i in 1:nrow(gene_list)){
##Read in LD file
inLD_prefix <- paste0(LD_path,"/Chr",dt_ma$chr[1],"_",gene_list[i,],".txt.ldm.full")
LD_in <- ReadLDMbin(inLD_prefix)
info_in <- read.table(paste0(inLD_prefix,".info"), sep = "", header = T, na.strings = "NA", stringsAsFactors = F)
colnames(LD_in) <- info_in$ID
rownames(LD_in) <- info_in$ID
# Match gwas snplist with refLD
#inLD: inLD_prefix
gene <- basename(inLD_prefix) #chr1_KANK4.txt.ldm.full
#print(gene)
name=substr(gene,1,(nchar(gene)-13))
ID=as.character(matrix(unlist(strsplit(name,'_')),ncol=2)[,2])
Chr=as.character(matrix(unlist(strsplit(name,'_')),ncol=2)[,1])
chr_name=as.numeric(substr(Chr,4,nchar(Chr)))
gwas_ori = dt_ma%>%filter(chr==chr_name,gene==ID)
common_snp_id=Reduce(intersect, list(gwas_ori$snp, colnames(LD_in))) #find-common-elements-from-refLD and gwas
LD_common_snp_id = colnames(LD_in)[match(common_snp_id,colnames(LD_in))] #get the new order_position(id) of refLD snps (re-ordered according to common snps in gwas summary data).
info_check=info_in[match(LD_common_snp_id,info_in$ID),] ## get MAF information of final refLD.
gwas_noqc = gwas_ori[match(common_snp_id, gwas_ori$snp),] #gwas re-ordered according to the order of common SNPs in gwas.
#allele flip for gwas summary statistics
gwas_noqc_final=allele_flip_gwas_beta(gwas_noqc,info_check,no_AF=FALSE)
if(nrow(gwas_noqc_final)==0){
print(paste0("No snp left in ", gene))
}else{
###############   remove SNPs that are not matched after allele flip
snplist_alf=Reduce(intersect, list(gwas_noqc_final$snp, colnames(LD_in)))
common_snp_id_02=Reduce(intersect, list(snplist_alf, common_snp_id))
LD_common_snp_id_02 = colnames(LD_in)[match(common_snp_id_02,colnames(LD_in))]
LD = LD_in[LD_common_snp_id_02,LD_common_snp_id_02]
z = as.matrix(gwas_noqc_final$beta/gwas_noqc_final$se)
R = as.matrix(LD)
eig = eigen(R, symmetric=TRUE)
fastBAT_call=fastBAT_file%>%dplyr::filter(Chr==chr_name,Gene==ID)
if(nrow(fastBAT_call)==0){
print(paste0("Chr",chr_name,"_",ID," fastBAT has no result"))
}else{
res_pre_prop = mbat_SVD(gwas_noqc_final, eig, prop, fastBAT_call, z, chr_name, ID,gene_annotate)
all_res=rbind(all_res,res_pre_prop)
}
}
}
setwd(result_path)
print(getwd())
write.table(all_res, file=paste0(result_path,"/mBAT_R_Chr",chr_name,".txt"), sep = "\t", row.names= F, col.names = T, quote = F)
return(all_res)
}
prop=0.9
res <- mBAT_combo(bim_file,
map_file,
assoc_file,
LD_path,
result_path,
fastBAT_output,
prop,
gene_annotate)
head(res)
head(res)
prop=0.9
res <- mBAT_combo(bim_file,
map_file,
assoc_file,
LD_path,
result_path,
fastBAT_output,
prop,
gene_annotate)
head(res)
mBAT_combo <- function(bim_file,
map_file,
assoc_file,
LD_path,
result_path,
fastBAT_output,
prop,
gene_annotate) {
gene_annotate <- data.table::fread(map_file,h=F)
names(gene_annotate) <- c("chr","start","end","gene")
#Read in original GWAS summary statistics in gene region.
gwas_ori <- data.table::fread(assoc_file)
#gwas_ori = read.table(assoc_file, sep = "", header = T, na.strings = "NA", stringsAsFactors = F)
names(gwas_ori) <- c("snp","A1","A2","AF1","beta","se","P","N")
bim <- data.table::fread(bim_file)
names(bim) <- c("chr","snp","bp","pos","A1","A2")
snp2gene_ma <- snp2gene(
bim,
gene_annotate,
window_start = 50,
window_end = 50,
only_sets = FALSE
)$map
dt <- dplyr::inner_join(bim%>%dplyr::mutate(chr = as.character(chr)),snp2gene_ma%>%dplyr::select("snp","chr","pos","gene"),by= c("chr", "snp", "pos"))%>%dplyr::select(snp,gene,chr)
dt <- na.omit(dt)
dt_ma <- dplyr::inner_join(dt,gwas_ori,by="snp")
# read in fastBAT pruning results including gene names
fastBAT_file <- data.table::fread(fastBAT_output)
fastBAT_file$Chr <- as.numeric(fastBAT_file$Chr)
fastBAT_file$Gene <- as.character(fastBAT_file$Gene)
gene_list <- data.frame(Gene=unique(dt_ma$gene))
all_res=NULL
for(i in 1:nrow(gene_list)){
##Read in LD file
inLD_prefix <- paste0(LD_path,"/Chr",dt_ma$chr[1],"_",gene_list[i,],".txt.ldm.full")
LD_in <- ReadLDMbin(inLD_prefix)
info_in <- read.table(paste0(inLD_prefix,".info"), sep = "", header = T, na.strings = "NA", stringsAsFactors = F)
colnames(LD_in) <- info_in$ID
rownames(LD_in) <- info_in$ID
# Match gwas snplist with refLD
#inLD: inLD_prefix
gene <- basename(inLD_prefix) #chr1_KANK4.txt.ldm.full
#print(gene)
name=substr(gene,1,(nchar(gene)-13))
ID=as.character(matrix(unlist(strsplit(name,'_')),ncol=2)[,2])
Chr=as.character(matrix(unlist(strsplit(name,'_')),ncol=2)[,1])
chr_name=as.numeric(substr(Chr,4,nchar(Chr)))
gwas_ori = dt_ma%>%filter(chr==chr_name,gene==ID)
common_snp_id=Reduce(intersect, list(gwas_ori$snp, colnames(LD_in))) #find-common-elements-from-refLD and gwas
LD_common_snp_id = colnames(LD_in)[match(common_snp_id,colnames(LD_in))] #get the new order_position(id) of refLD snps (re-ordered according to common snps in gwas summary data).
info_check=info_in[match(LD_common_snp_id,info_in$ID),] ## get MAF information of final refLD.
gwas_noqc = gwas_ori[match(common_snp_id, gwas_ori$snp),] #gwas re-ordered according to the order of common SNPs in gwas.
#allele flip for gwas summary statistics
gwas_noqc_final=allele_flip_gwas_beta(gwas_noqc,info_check,no_AF=FALSE)
if(nrow(gwas_noqc_final)==0){
print(paste0("No snp left in ", gene))
}else{
###############   remove SNPs that are not matched after allele flip
snplist_alf=Reduce(intersect, list(gwas_noqc_final$snp, colnames(LD_in)))
common_snp_id_02=Reduce(intersect, list(snplist_alf, common_snp_id))
LD_common_snp_id_02 = colnames(LD_in)[match(common_snp_id_02,colnames(LD_in))]
LD = LD_in[LD_common_snp_id_02,LD_common_snp_id_02]
z = as.matrix(gwas_noqc_final$beta/gwas_noqc_final$se)
R = as.matrix(LD)
eig = eigen(R, symmetric=TRUE)
fastBAT_call=fastBAT_file%>%dplyr::filter(Chr==chr_name,Gene==ID)
if(nrow(fastBAT_call)==0){
print(paste0("Chr",chr_name,"_",ID," fastBAT has no result"))
}else{
res_pre_prop = mbat_SVD(gwas_noqc_final, eig, prop, fastBAT_call, z, chr_name, ID,gene_annotate)
all_res=rbind(all_res,res_pre_prop)
}
}
}
return(all_res)
setwd(result_path)
print(getwd())
write.table(all_res, file=paste0(result_path,"/mBAT_R_Chr",chr_name,".txt"), sep = "\t", row.names= F, col.names = T, quote = F)
}
prop=0.9
res <- mBAT_combo(bim_file,
map_file,
assoc_file,
LD_path,
result_path,
fastBAT_output,
prop,
gene_annotate)
head(map_file)
head(gene_annotate)
dim(bim_file)
head(bim_file)
prop=0.9
res <- mBAT_combo(bim_file,
map_file,
assoc_file,
LD_path,
result_path,
fastBAT_output,
prop,
gene_annotate)
head(res)
snp2gene <- function(info_snp, info_gene,
window_start = 50L,
window_end = 50L,
only_sets=FALSE) {
info_snp_name <- deparse(substitute(info_snp))
df_check(info_snp)
df_check(info_gene)
columns_check(info_snp, c("snp", "chr", "pos"))
columns_check(info_gene, c("gene", "chr", "start", "end"))
nonneg_num_check(window_start, "window_start")
nonneg_num_check(window_end, "window_end")
if (anyDuplicated(info_snp$snp) > 0L) {
stop("SNP IDs in ", "'", info_snp_name, "'", " must be unique.",
call. = FALSE)
}
snpdat <- data.table::data.table(
snp = as.character(info_snp$snp),
chr = as.character(info_snp$chr),
start = as.integer(info_snp$pos),
end = as.integer(info_snp$pos),
key = c("chr", "start", "end")
)
genedat <- data.table::data.table(
gene = as.character(info_gene$gene),
chr = as.character(info_gene$chr),
start = as.integer(
ifelse(info_gene$start - window_start * 1000 < 1L,
1,
info_gene$start - window_start * 1000)
),
end = as.integer(info_gene$end + window_end * 1000),
gene.start = as.integer(info_gene$start),
gene.end = as.integer(info_gene$end),
key = c("chr", "start", "end")
)
mapped <- data.table::foverlaps(snpdat, genedat, type = "within")
snp_sets <- lapply(split(mapped[!is.na(gene), .(snp, gene)],
by = "gene", keep.by = FALSE),
function(x) unique(unname(unlist(x))))
if (only_sets) {
list(sets = snp_sets)
} else {
data.table::setnames(mapped,
old = c("start", "end", "i.start"),
new = c("gene.adj.start", "gene.adj.end", "pos"))
vkeep <- c("snp", "chr", "pos",
"gene", "gene.start", "gene.end",
"gene.adj.start", "gene.adj.end")
list(sets = snp_sets,
map = data.table::setDF(setorder(mapped[, vkeep, with = FALSE],
chr, gene.start, gene.end, pos,
na.last = TRUE)))
}
}
library(mBAT)
path <- system.file("extdata",package = "mBAT")
list.files(path)
bim_file <- paste0(path,"/","1000G_eur_unrel_ukbcom22.bim")
map_file <- paste0(path,"/","hg19_v40_glist_Pat_v1.txt")
assoc_file <- paste0(path,"/","Chr22.fastGWA.ma")
LD_path <- paste0(path,"/","LD_Chr22")
#result_path <- paste0(path,"/","extdata")
fastBAT_output <- paste0(path,"/","fb_Chr22_1kg.gene.fastbat")
prop=0.9
#res <- mBAT_combo(bim_file,
#                  map_file,
#                  assoc_file,
#                  LD_path,
#                  result_path,
#                  fastBAT_output,
#                  prop,
#                  gene_annotate)
#head(res)
res <- mBAT_combo(bim_file,
map_file,
assoc_file,
LD_path,
result_path,
fastBAT_output,
prop,
gene_annotate)
head(res)
library(utils)
library(mBAT)
path <- system.file("extdata",package = "mBAT")
list.files(path)
bim_file <- paste0(path,"/","1000G_eur_unrel_ukbcom22.bim")
map_file <- paste0(path,"/","hg19_v40_glist_Pat_v1.txt")
assoc_file <- paste0(path,"/","Chr22.fastGWA.ma")
LD_path <- paste0(path,"/","LD_Chr22")
#result_path <- paste0(path,"/","extdata")
fastBAT_output <- paste0(path,"/","fb_Chr22_1kg.gene.fastbat")
prop=0.9
res <- mBAT_combo(bim_file,
map_file,
assoc_file,
LD_path,
result_path,
fastBAT_output,
prop,
gene_annotate)
devtools::install_github("Share-AL-work/mBAT.combo")
library(mBAT)
path <- system.file("extdata",package = "mBAT")
list.files(path)
bim_file <- paste0(path,"/","1000G_eur_unrel_ukbcom22.bim")
map_file <- paste0(path,"/","hg19_v40_glist_Pat_v1.txt")
assoc_file <- paste0(path,"/","Chr22.fastGWA.ma")
LD_path <- paste0(path,"/","LD_Chr22")
#result_path <- paste0(path,"/","extdata")
fastBAT_output <- paste0(path,"/","fb_Chr22_1kg.gene.fastbat")
prop=0.9
res <- mBAT_combo(bim_file,map_file,assoc_file,LD_path,result_path,fastBAT_output,prop,gene_annotate)
install.packages("snpsettest")
library(snpsettest)
usethis::use_package(package = "snpsettest", type = "Imports")
smr_scz_all <- read_excel("Supplementary Table 17.xlsx", sheet = "ST17d combined all SMR")
library("readxl")
setwd("/Users/uqali4/Project_PhD/sc_related/scz_2021_sup")
smr_hic_scz <- read_excel("Supplementary Table 12.xlsx", sheet = "Prioritised")%>%filter(gene_biotype=="protein_coding")%>%dplyr::rename(Gene=Symbol.ID) #106 genes
# Specify sheet by its name
smr_scz_single <- read_excel("Supplementary Table 17.xlsx", sheet = "ST17f single SMR gene at locus") #33 genes
smr_scz_all <- read_excel("Supplementary Table 17.xlsx", sheet = "ST17d combined all SMR")
